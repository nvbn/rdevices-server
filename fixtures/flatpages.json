[
{
    "pk": 1, 
    "model": "flatpages.flatpage", 
    "fields": {
        "registration_required": false, 
        "title": "Download client", 
        "url": "/download/", 
        "template_name": "", 
        "sites": [
            1
        ], 
        "content": "<h3>Ubuntu ppa</h3>Ubuntu users can install client from ppa:\r\n\r\n<pre class='prettyprint linenums'>sudo add-apt-repository ppa:nvbn-rm/ppa\r\nsudo apt-get update\r\nsudo apt-get install rdclient\r\n</pre>\r\n\r\n\r\n<h3>Windows binary</h3>Windows users can install client from <a href='#'>exe</a>.\r\n\r\n\r\n<h3>Install from pip</h3>Everyone can install client from pip.\r\nFirst of all <a href='http://www.pip-installer.org/en/latest/installing.html#using-get-pip'>install pip</a> and run:\r\n\r\n<pre class='prettyprint linenums'>pip install rdclient</pre>\r\n\r\n\r\n<h3>Install from source</h3>For installing from source do:\r\n\r\n<pre class='prettyprint linenums'>git clone git://github.com/nvbn/rdevices-client.git\r\ncd rdevices-client\r\npython setup.py install\r\n</pre>", 
        "enable_comments": false
    }
},
{
    "pk": 2, 
    "model": "flatpages.flatpage", 
    "fields": {
        "registration_required": false, 
        "title": "How-to", 
        "url": "/how-to/", 
        "template_name": "", 
        "sites": [
            1
        ], 
        "content": "<h3><a href='/pages/download/'>Install rdclient</a></h3><h3><a href='#create-device'>Create device</a></h3><h3><a href='#create-dashboard'>Create dashboard</a></h3><h3><a href='#use-restfull-api'>Use RESTfull api</a></h3>\r\n\r\n<h3 id='create-device'>Create device</h3>For creating device you need to create device on site. And use <code>Device</code> class and <code>method([result], [arg=arg], ...)</code> decorator from rdclient:\r\n\r\n<pre class='prettyprint linenums'>from rdclient import Device, method</pre>Create your device class and set uuid from site to <code>Meta</code>:\r\n\r\n<pre class='prettyprint linenums'>class MyDevice(Device):\r\n    class Meta:\r\n        uuid = 'DEVICE_UUID'</pre>And declare device methods. For methods without return:\r\n\r\n<pre class='prettyprint linenums'>    @method('None')\r\n    def print_123(self):\r\n        print 123</pre>For methods with return:\r\n\r\n<pre class='prettyprint linenums'>    @method('int')\r\n    def get_123(self):\r\n        return 123</pre>For methods without return and with arguments:\r\n\r\n<pre class='prettyprint linenums'>    @method('None', a='int', b='int')\r\n    def store_a_and_b(self, a, b):\r\n        self.a = a\r\n        self.b = b</pre>And for methods with return and with arguments:\r\n\r\n<pre class='prettyprint linenums'>    @method('int', a='int', b='int', c='int')\r\n    def sum_a_and_b_and_c(self, a, b, c):\r\n        return a + b + c</pre>After that you need to save device file, for example as <code>device.py</code> and run rdclient:\r\n\r\n<pre class='prettyprint linenums'>rdclient device.py</pre>For starting rdclient with system use <a href=\"http://supervisord.org/\">supervisor</a>.\r\n\r\n<a data-toggle=\"collapse\" href=\"#full-device-code\">Show full example</a>\r\n\r\n<pre id='full-device-code' class='prettyprint linenums collapse in\"'>from rdclient import Device, method\r\n&nbsp;\r\n\r\nclass MyDevice(Device):\r\n    class Meta:\r\n        uuid = 'DEVICE_UUID'\r\n    \r\n    @method('None')\r\n    def print_123(self):\r\n        print 123\r\n    \r\n    @method('int')\r\n    def get_123(self):\r\n        return 123\r\n    \r\n    @method('None', a='int', b='int')\r\n    def store_a_and_b(self, a, b):\r\n        self.a = a\r\n        self.b = b\r\n    \r\n    @method('int', a='int', b='int', c='int')\r\n    def sum_a_and_b_and_c(self, a, b, c):\r\n        return a + b + c</pre>\r\n\r\n<h3 id='create-dashboard'>Create dashboard</h3>First of all go to device page and see device api methods defenition and copy device id. <a href='/devices/dashboard/create/'>Create dashboard</a> and open it code.\r\n\r\nCreate html layout for dashborad for <code>MyDevice</code>:<pre class='prettyprint linenums'>&lt;button id='print_123'&gt;print 123&lt;/button&gt;&lt;br /&gt;\r\n\r\n&lt;button id='get_123'&gt;get 123&lt;/button&gt;\r\n&lt;span id='get_123_value'&gt;&lt;/span&gt;&lt;br /&gt;\r\n\r\n&lt;input type='number' placeholder='a' id='store_a' /&gt;\r\n&lt;input type='number' placeholder='b' id='store_b' /&gt;\r\n&lt;button id='store_a_and_b'&gt;store a and b&lt;/button&gt;&lt;br /&gt;\r\n\r\n&lt;input type='number' placeholder='a' id='sum_a' /&gt;\r\n&lt;input type='number' placeholder='b' id='sum_b' /&gt;\r\n&lt;input type='number' placeholder='c' id='sum_c' /&gt;\r\n&lt;button id='sum_a_and_b_and_c'&gt;sum a and b and c&lt;/button&gt;\r\n&lt;span id='sum_a_and_b_and_c_value'&gt;&lt;/span&gt;&lt;br /&gt;\r\n</pre>\r\n\r\nAnd add actions to layout with scripts. You can use <a href='#js'>JavaScript</a>, <a href='#coffee'>CoffeeScript</a> and <a href='#iced'>IcedCoffeeScript</a>. I recommend using IcedCoffeeScript.\r\n\r\n<h4 id=\"js\">Dashboard scripting with JavaScript</h4>JavaScript code need to be in <code>&lt;script type='text/javascript'&gt;&lt;/script&gt;</code>\r\n\r\nFirst you need to initialize dashboard with:<pre class='prettyprint linenums'>dashboard.ready(function(){\r\n    doSomethingWithDashboard();\r\n});\r\n</pre>\r\n\r\nAnd get device:<pre class='prettyprint linenums'>dashboard.getDevice(DEVICE_ID, function(device){\r\n    doSomethingWithDevice();\r\n});\r\n</pre>\r\n\r\nAfter that you can call methods without arguments and returns:<pre class='prettyprint linenums'>device.print_123({});</pre>\r\n\r\nWith returns:<pre class='prettyprint linenums'>device.get_123({}, function(result){\r\n    doSomethingWithResult();\r\n});\r\n</pre>\r\n\r\nWith arguments:<pre class='prettyprint linenums'>device.store_a_and_b({\r\n    a: 1,\r\n    b: 2\r\n});\r\n</pre>\r\n\r\nAnd with arguments and returns:<pre class='prettyprint linenums'>device.sum_a_and_b_and_c({\r\n    a: 1,\r\n    b: 2,\r\n    c: 3\r\n}, function(result){\r\n    doSomethingWithResult();\r\n});\r\n</pre>\r\n\r\n<a data-toggle=\"collapse\" href=\"#full-js-code\">Show full example</a>\r\n\r\n<pre id='full-js-code' class='prettyprint linenums collapse in\"'>&lt;button id='print_123'&gt;print 123&lt;/button&gt;&lt;br /&gt;\r\n\r\n&lt;button id='get_123'&gt;get 123&lt;/button&gt;\r\n&lt;span id='get_123_value'&gt;&lt;/span&gt;&lt;br /&gt;\r\n\r\n&lt;input type='number' placeholder='a' id='store_a' /&gt;\r\n&lt;input type='number' placeholder='b' id='store_b' /&gt;\r\n&lt;button id='store_a_and_b'&gt;store a and b&lt;/button&gt;&lt;br /&gt;\r\n\r\n&lt;input type='number' placeholder='a' id='sum_a' /&gt;\r\n&lt;input type='number' placeholder='b' id='sum_b' /&gt;\r\n&lt;input type='number' placeholder='c' id='sum_c' /&gt;\r\n&lt;button id='sum_a_and_b_and_c'&gt;sum a and b and c&lt;/button&gt;\r\n&lt;span id='sum_a_and_b_and_c_value'&gt;&lt;/span&gt;&lt;br /&gt;\r\n\r\n&lt;script type='text/javascript'&gt;\r\n    dashboard.ready(function(){\r\n        dashboard.getDevice(DEVICE_ID, function(device){\r\n            $('#print_123').click(function(){\r\n                device.print_123({});\r\n            });\r\n\r\n            $('#get_123').click(function(){\r\n                device.get_123({}, function(result){\r\n                    $('#get_123_value').html(result);\r\n                });\r\n            });\r\n\r\n            $('#store_a_and_b').click(function(){\r\n                device.store_a_and_b({\r\n                    a: $('#store_a').val(),\r\n                    b: $('#store_b').val()\r\n                });\r\n            });\r\n\r\n            $('#sum_a_and_b_and_c').click(function(){\r\n                device.sum_a_and_b_and_c({\r\n                    a: $('#sum_a').val(),\r\n                    b: $('#sum_b').val(),\r\n                    c: $('#sum_c').val()\r\n                }, function(result){\r\n                    $('#sum_a_and_b_and_c_value').html(result);\r\n                });\r\n            });\r\n        });\r\n    });\r\n&lt;/script&gt;\r\n</pre>\r\n\r\n<h4 id=\"coffee\">Dashboard scripting with CoffeeScript</h4>CoffeeScript code need to be in <code>&lt;script type='text/coffeescript'&gt;&lt;/script&gt;</code>\r\n\r\nFirst you need to initialize dashboard with:<pre class='prettyprint linenums'>dashboard.ready ->\r\n    doSomethingWithDashboard()\r\n</pre>\r\n\r\nAnd get device:<pre class='prettyprint linenums'>dashboard.getDevice DEVICE_ID, (device) ->\r\n    doSomethingWithDevice()\r\n</pre>\r\n\r\nAfter that you can call methods without arguments and returns:<pre class='prettyprint linenums'>device.print_123 {}</pre>\r\n\r\nWith returns:<pre class='prettyprint linenums'>device.get_123 {}, (result) ->\r\n    doSomethingWithResult()\r\n</pre>\r\n\r\nWith arguments:<pre class='prettyprint linenums'>device.store_a_and_b\r\n    a: 1\r\n    b: 2\r\n</pre>\r\n\r\nAnd with arguments and returns:<pre class='prettyprint linenums'>device.sum_a_and_b_and_c\r\n    a: 1\r\n    b: 2\r\n    c: 3\r\n, (result) ->\r\n    doSomethingWithResult()\r\n</pre>\r\n\r\n<a data-toggle=\"collapse\" href=\"#full-coffee-code\">Show full example</a>\r\n\r\n<pre id='full-coffee-code' class='prettyprint linenums collapse in\"'>&lt;button id='print_123'&gt;print 123&lt;/button&gt;&lt;br /&gt;\r\n\r\n&lt;button id='get_123'&gt;get 123&lt;/button&gt;\r\n&lt;span id='get_123_value'&gt;&lt;/span&gt;&lt;br /&gt;\r\n\r\n&lt;input type='number' placeholder='a' id='store_a' /&gt;\r\n&lt;input type='number' placeholder='b' id='store_b' /&gt;\r\n&lt;button id='store_a_and_b'&gt;store a and b&lt;/button&gt;&lt;br /&gt;\r\n\r\n&lt;input type='number' placeholder='a' id='sum_a' /&gt;\r\n&lt;input type='number' placeholder='b' id='sum_b' /&gt;\r\n&lt;input type='number' placeholder='c' id='sum_c' /&gt;\r\n&lt;button id='sum_a_and_b_and_c'&gt;sum a and b and c&lt;/button&gt;\r\n&lt;span id='sum_a_and_b_and_c_value'&gt;&lt;/span&gt;&lt;br /&gt;\r\n\r\n&lt;script type='text/coffeescript'&gt;\r\n    dashboard.ready ->\r\n        dashboard.getDevice DEVICE_ID, (device) ->\r\n            $('#print_123').click =>\r\n                device.print_123 {}\r\n\r\n            $('#get_123').click =>\r\n                device.get_123 {}, (result) =>\r\n                    $('#get_123_value').html result\r\n\r\n            $('#store_a_and_b').click =>\r\n                device.store_a_and_b\r\n                    a: $('#store_a').val()\r\n                    b: $('#store_b').val()\r\n\r\n            $('#sum_a_and_b_and_c') =>\r\n                device.sum_a_and_b_and_c\r\n                    a: $('#sum_a').val()\r\n                    b: $('#sum_b').val()\r\n                    c: $('#sum_c').val()\r\n                , (result) =>\r\n                    $('#sum_a_and_b_and_c_value').html result\r\n&lt;/script&gt;\r\n</pre>\r\n\r\n<h4 id=\"iced\">Dashboard scripting with IcedCoffeeScript</h4>IcedCoffeeScript code need to be in <code>&lt;script type='text/iced-coffeescript'&gt;&lt;/script&gt;</code>\r\n\r\nFirst you need to initialize dashboard with:<pre class='prettyprint linenums'>await dashboard.ready\r\ndoSomethingWithDashboard()\r\n</pre>\r\n\r\nAnd get device:<pre class='prettyprint linenums'>await dashboard.getDevice DEVICE_ID, defer device\r\ndoSomethingWithDevice()\r\n</pre>\r\n\r\nAfter that you can call methods without arguments and returns:<pre class='prettyprint linenums'>device.print_123 {}</pre>\r\n\r\nWith returns:<pre class='prettyprint linenums'>await device.get_123 {}, defer result\r\ndoSomethingWithResult()\r\n</pre>\r\n\r\nWith arguments:<pre class='prettyprint linenums'>device.store_a_and_b\r\n    a: 1\r\n    b: 2\r\n</pre>\r\n\r\nAnd with arguments and returns:<pre class='prettyprint linenums'>await device.sum_a_and_b_and_c\r\n    a: 1\r\n    b: 2\r\n    c: 3\r\n, defer result\r\ndoSomethingWithResult()\r\n</pre>\r\n\r\n<a data-toggle=\"collapse\" href=\"#full-iced-code\">Show full example</a>\r\n\r\n<pre id='full-iced-code' class='prettyprint linenums collapse in\"'>&lt;button id='print_123'&gt;print 123&lt;/button&gt;&lt;br /&gt;\r\n\r\n&lt;button id='get_123'&gt;get 123&lt;/button&gt;\r\n&lt;span id='get_123_value'&gt;&lt;/span&gt;&lt;br /&gt;\r\n\r\n&lt;input type='number' placeholder='a' id='store_a' /&gt;\r\n&lt;input type='number' placeholder='b' id='store_b' /&gt;\r\n&lt;button id='store_a_and_b'&gt;store a and b&lt;/button&gt;&lt;br /&gt;\r\n\r\n&lt;input type='number' placeholder='a' id='sum_a' /&gt;\r\n&lt;input type='number' placeholder='b' id='sum_b' /&gt;\r\n&lt;input type='number' placeholder='c' id='sum_c' /&gt;\r\n&lt;button id='sum_a_and_b_and_c'&gt;sum a and b and c&lt;/button&gt;\r\n&lt;span id='sum_a_and_b_and_c_value'&gt;&lt;/span&gt;&lt;br /&gt;\r\n\r\n&lt;script type='text/iced-coffeescript'&gt;\r\n    await dashboard.ready\r\n    await dashboard.getDevice DEVICE_ID, defer device\r\n\r\n    $('#print_123').click =>\r\n        device.print_123 {}\r\n\r\n    $('#get_123').click =>\r\n        await device.get_123 {}, defer result\r\n        $('#get_123_value').html result\r\n\r\n    $('#store_a_and_b').click =>\r\n        device.store_a_and_b\r\n            a: $('#store_a').val()\r\n            b: $('#store_b').val()\r\n\r\n    $('#sum_a_and_b_and_c') =>\r\n        await device.sum_a_and_b_and_c\r\n            a: $('#sum_a').val()\r\n            b: $('#sum_b').val()\r\n            c: $('#sum_c').val()\r\n        , defer result\r\n        $('#sum_a_and_b_and_c_value').html result\r\n&lt;/script&gt;\r\n</pre>\r\n\r\n<h3 id='use-restfull-api'>Use RESTfull api</h3>First you need to <a href=\"/accounts/nvbn/keys/\">create api key</a>.\r\n\r\nFor all <code>GET</code> and <code>POST</code> to api you need to specifie content-type in headers:<pre class='prettyprint linenums'>Accept: application/json\r\nContent-type: application/json</pre>\r\n\r\nYou can use json or xml.\r\n\r\nFor calling method you need to <code>POST</code> to <code>http://rdevic.es/api/v1/device_method_call/?username=USERNAME&amp;api_key=API_KEY</code> json or xml encoded object like:<pre class='prettyprint linenums'>{\r\n    method: 'sum_a_and_b_and_c',\r\n    device: DEVICE_UUID,\r\n    request: {\r\n        a: 1,\r\n        b: 2,\r\n        c: 3\r\n    }\r\n}\r\n</pre>\r\n\r\nAnd you receive object like:<pre class='prettyprint linenums'>{\r\n    method_id: METHOD_ID,\r\n    request: {\r\n        a: 1,\r\n        b: 2,\r\n        c: 3\r\n    },\r\n    response: {},\r\n    state: 0,\r\n    text_state: 'started',\r\n    id: CALL_ID,\r\n    resource_uri: '/api/v1/device_method_call/CALL_ID/',\r\n}\r\n</pre>\r\n\r\nAvailable states:<pre class='prettyprint linenums'>STATE_CREATED = 0\r\nSTATE_FINISHED = 1\r\nSTATE_ERROR = 2\r\n</pre>\r\n\r\nFor checking priviosly created call you need to <code>GET</code> to <code>resource_uri</code> with username and api key, like <code>/api/v1/device_method_call/CALL_ID/?username=USERNAME&amp;api_key=API_KEY</code>\r\n\r\n\r\n<a data-toggle=\"collapse\" href=\"#curl-code\">Show example calls with curl</a>\r\n\r\n<pre id='curl-code' class='prettyprint linenums collapse in\"'>curl \"http://rdevic.es/api/v1/device_method_call/?username=USERNAME&api_key=API_KEY\"\\\r\n    -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d\\\r\n    \"{\\\"method\\\":\\\"sum_a_and_b_and_c\\\",\\\"device\\\":\\\"DEVICE_UUID\\\",\\\"request\\\":{\\\"a\\\": 1, \\\"b\\\": 2, \\\"c\\\": 3}}\"\r\n\r\ncurl \"http://rdevic.es/api/v1/device_method_call/CALL_ID/?username=USERNAME&api_key=API_KEY\"\\\r\n    -H \"Accept: application/json\" -H \"Content-type: application/json\"\r\n</pre>", 
        "enable_comments": false
    }
}
]
